package com.imjustdoom.minecrash.database;

import com.imjustdoom.minecrash.Main;
import lombok.Getter;

import java.sql.*;

@Getter
public class DatabaseConnection {

    public Statement stmt;
    public Connection conn;

    public DatabaseConnection() {
        String user = Main.getInstance().getConfig().getUser();
        String pass = Main.getInstance().getConfig().getPassword();
        String server = Main.getInstance().getConfig().getHost();
        String port = Main.getInstance().getConfig().getPort();
        String database = Main.getInstance().getConfig().getDatabase();

        //Connect and setup database
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection(
                    "jdbc:mysql://" + server + ":" + port + "/" + database + "?autoConnect=true", user, pass);
            stmt = conn.createStatement();

            createSQLTables();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public PreparedStatement prepareStatement(String sql) {
        try {
            return conn.prepareStatement(sql);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) {
        try {
            return conn.prepareStatement(sql, autoGeneratedKeys);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    private void createSQLTables() throws SQLException {
        String sql = "CREATE TABLE IF NOT EXISTS review (" +
                "`id` INT NOT NULL AUTO_INCREMENT, " +
                "`userId` VARCHAR(20) NOT NULL, " +
                "`error` TEXT(65560) NOT NULL, " +
                "`solved` BOOLEAN NOT NULL," +
                "PRIMARY KEY (`id`) " +
                ") ENGINE=InnoDB;";

        stmt.executeUpdate(sql);

        sql = "CREATE TABLE IF NOT EXISTS blocked_users (" +
                "`userId` VARCHAR(20) NOT NULL, " +
                "`reason` VARCHAR(1024) NOT NULL, " +
                "PRIMARY KEY (`userId`) " +
                ") ENGINE=InnoDB;";

        stmt.executeUpdate(sql);
    }

    public String addErrorForReview(String userId, String error) {
        String sql = "INSERT INTO review (userId, error, solved) VALUES (?, ?, ?)";
        try {
            PreparedStatement preparedStatement = prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            preparedStatement.setString(1, userId);
            preparedStatement.setString(2, error);
            preparedStatement.setBoolean(3, false);
            preparedStatement.executeUpdate();

            ResultSet rs = preparedStatement.getGeneratedKeys();
            if(rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return "-1";
    }

    public void removeErrorForReview(String id) {
        String sql = "DELETE FROM review WHERE id = ?";
        try {
            PreparedStatement preparedStatement = prepareStatement(sql);
            preparedStatement.setString(1, id);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void solveErrorForReview(String id) {
        String sql = "UPDATE review SET solved = ? WHERE id = ?";
        try {
            PreparedStatement preparedStatement = prepareStatement(sql);
            preparedStatement.setBoolean(1, true);
            preparedStatement.setString(2, id);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public boolean containsErrorForReview(String id) {
        String sql = "SELECT id FROM review WHERE id = ?";
        try {
            PreparedStatement preparedStatement = prepareStatement(sql);
            preparedStatement.setString(1, id);
            ResultSet rs = preparedStatement.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    public boolean errorForReview(String id) {
        String sql = "SELECT solved FROM review WHERE id = ?";
        try {
            PreparedStatement preparedStatement = prepareStatement(sql);
            preparedStatement.setString(1, id);
            ResultSet rs = preparedStatement.executeQuery();
            if (rs.next()) {
                return rs.getBoolean(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    public String getErrorFromReview(int id) {
        String sql = "SELECT error FROM review WHERE id = ?";
        try {
            PreparedStatement preparedStatement = prepareStatement(sql);
            preparedStatement.setInt(1, id);
            ResultSet rs = preparedStatement.executeQuery();
            if(rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return null;
    }

    public String getUserIdFromReview(int id) {
        String sql = "SELECT userId FROM review WHERE id = ?";
        try {
            PreparedStatement preparedStatement = prepareStatement(sql);
            preparedStatement.setInt(1, id);
            ResultSet rs = preparedStatement.executeQuery();
            if(rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return null;
    }

    public boolean addUserToBlockedUsers(String userId, String reason) {
        String sql = "INSERT INTO blocked_users (userId, reason) VALUES (?, ?)";
        try {
            PreparedStatement preparedStatement = prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            preparedStatement.setString(1, userId);
            preparedStatement.setString(2, reason);
            preparedStatement.executeUpdate();

            return true;
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return false;
    }

    public boolean removeUserFromBlockedUsers(String userId) {
        String sql = "DELETE FROM blocked_users WHERE userId = ?";
        try {
            PreparedStatement preparedStatement = prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            preparedStatement.setString(1, userId);
            preparedStatement.executeUpdate();

            return true;
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return false;
    }

    public boolean isUserBlocked(String userId) {
        String sql = "SELECT userId FROM blocked_users WHERE userId = ?";
        try {
            PreparedStatement preparedStatement = prepareStatement(sql);
            preparedStatement.setString(1, userId);
            ResultSet rs = preparedStatement.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    public String getBlockedUserReason(String userId) {
        String sql = "SELECT reason FROM blocked_users WHERE userId = ?";
        try {
            PreparedStatement preparedStatement = prepareStatement(sql);
            preparedStatement.setString(1, userId);
            ResultSet rs = preparedStatement.executeQuery();
            if (rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return "";
    }
}
